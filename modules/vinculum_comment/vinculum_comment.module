<?php
/**
 * @file
 * Simple module to add a comment when a vinculum is received.
 */

/**
 * Implements hook_vinculum_received_action().
 */
function vinculum_comment_vinculum_received_action($vinculum) {
  // @TODO: support customisable filter format.
  $format = 'filtered_html';

  // Trackbacks can provide more valuable information than pingbacks (e.g.
  // the blog name, the title of the remote post, etc). Use this information
  // if it's provided.

  switch ($vinculum->handler) {

    case 'vinculum_pingback':
      $comment_text = t('<p>Pingback: !blog_url.</p>', array('!blog_url' => l($vinculum->url, $vinculum->url, array('attributes' => array('rel' => 'nofollow',)))));
      $excerpt = _vinculum_get_excerpt($vinculum->url, url("node/{$vinculum->nid}", array('absolute' => TRUE)));
      if ($excerpt) {
        // Add two new lines for triggering filtered_html to creating a paragraph
        $comment_text .= "\n\n" . check_markup('<p>… ' . $excerpt . ' …</p>', $format);
      }
      //@REMOVE watchdog('DEBUG', '!text', array('!text' => $comment_text), WATCHDOG_DEBUG);

      $comment = (object) array(
        'cid'      => NULL,
        'pid'      => 0,
        'nid'      => $vinculum->nid,
        // The anonymous user is hard-coded in Drupal to use uid 0.
        'uid'      => 0,
        'subject'  => t('Blog posting on @url', array('@url' => parse_url(check_url($vinculum->url), PHP_URL_HOST))),
        'created'  => $vinculum->timestamp,
        'changed'  => $vinculum->timestamp,
        'status'   => COMMENT_PUBLISHED,
        //@FIXED:
        // Notice: Undefined variable: comment in vinculum_comment_vinculum_received_action() (Zeile 33 von /modules/vinculum/modules/vinculum_comment/vinculum_comment.module).
        'name'     => parse_url(check_url($vinculum->url), PHP_URL_HOST),
        'mail'     => '',
        'homepage' => check_url($vinculum->url),
        // @TODO: Language settings:
        // - Detect the language of the comment?
        // - Match the language of the node?
        // - Use the language meta-data from the remote blog?
        'language' => LANGUAGE_NONE,
        'comment_body' => array(
          LANGUAGE_NONE => array(
            array(
              'summary' => '',
              'value'   => $comment_text,
              'format'  => $format,
            ),
          ),
        ),
      );
      break;

    case 'vinculum_trackback':
      $trackback = $vinculum->data;
      $comment_text = t('<p>Trackback: !blog_url.</p>', array('!blog_url' => l($trackback->title, $vinculum->url, array('attributes' => array('rel' => 'nofollow',)))));
      // Add two new lines for triggering filtered_html to creating a paragraph
      $comment_text .= "\n\n" . check_markup('<p>… ' . $trackback->excerpt . ' …</p>', $format);

      $comment = (object) array(
        'cid'      => NULL,
        'pid'      => 0,
        'nid'      => $vinculum->nid,
        // The anonymous user is hard-coded in Drupal to use uid 0.
        'uid'      => 0,
        'subject'  => t('Blog posting on @url', array('@url' => parse_url(check_url($vinculum->url), PHP_URL_HOST))),
        'created'  => $vinculum->timestamp,
        'changed'  => $vinculum->timestamp,
        'status'   => COMMENT_PUBLISHED,
        'name'     => check_plain($trackback->blog_name),
        'mail'     => '',
        'homepage' => check_url($vinculum->url),
        // @TODO: Language settings:
        // - Detect the language of the comment?
        // - Match the language of the node?
        // - Use the language meta-data from the remote blog?
        'language' => LANGUAGE_NONE,
        'comment_body' => array(
          LANGUAGE_NONE => array(
            array(
              'summary' => '',
              'value'   => $comment_text,
              'format'  => $format,
            ),
          ),
        ),
      );
      break;
  }

  comment_save($comment);

  // The comment module forces 'hostname' to use ip_address().
  // Vinculums can be saved through an API (where the origin_ip parameter
  // provides the original ip address), so update the comment table's value
  // here.
  db_update('comment')
    ->fields(array(
      'hostname' => $vinculum->origin_ip,
    ))
    ->condition('cid', $comment->cid)
    ->execute();
}

/**
* Gets an excerpt of the source site.
* Adapted from Pingback Drupal 6 module.
*
* @param String $pagelinkedfrom
*   The URL of the source site.
* @return
*   A excerpt or FALSE in case of problems.
*/
function _vinculum_get_excerpt($pagelinkedfrom, $pagelinkedto) {
  $excerpt = FALSE;
  // Let's check the remote site
  $r = drupal_http_request($pagelinkedfrom);
  if (!empty($r->error))
    return FALSE;
  $linea = $r->data;

  // Work around bug in strip_tags():
  $linea = str_replace('<!DOC', '<DOC', $linea);
  $linea = preg_replace('/[\s\r\n\t]+/', ' ', $linea); // normalize spaces
  $linea = preg_replace('/ <(h1|h2|h3|h4|h5|h6|p|th|td|li|dt|dd|pre|caption|input|textarea|button|body|br)[^>]*>/', "\n\n", $linea);

  preg_match('|<title>([^<]*?)</title>|is', $linea, $matchtitle);
  $title = check_plain($matchtitle[1]);
  if (empty($title)) {
    return FALSE;
  }

  $linea = strip_tags($linea, '<a>'); // just keep the tag we need

  $p = explode("\n\n", $linea);

  $preg_target = preg_quote($pagelinkedto);

  foreach ($p as $para) {
    if (strpos($para, $pagelinkedto) !== FALSE) { // it exists, but is it a link?
      preg_match('|<a[^>]+?'. $preg_target .'[^>]*>([^>]+?)</a>|', $para, $context);

      // If the URL isn't in a link context, keep looking
      if (empty($context)) {
        continue;
      }

      // We're going to use this fake tag to mark the context in a bit
      // the marker is needed in case the link text appears more than once in the paragraph
      //I edited <wpcontext></wpcontext> to <dpcontext></dpcontext> so it becomes more Drupal-ish!
      $excerpt = preg_replace('|\</?dpcontext\>|', '', $para);


      // prevent really long link text
      $limit = 200;
      if (drupal_strlen($context[1]) > $limit) {
        $context[1] = drupal_substr($context[1], 0, $limit) .' …';
      }

      $marker = '<dpcontext>'. $context[1] .'</dpcontext>'; // set up our marker
      $excerpt = str_replace($context[0], $marker, $excerpt); // swap out the link for our marker
      $excerpt = strip_tags($excerpt, '<dpcontext>'); // strip all tags but our context marker
      $excerpt = trim($excerpt);
      $preg_marker = preg_quote($marker);
      $excerpt = preg_replace("|.*?\s(.{0,$limit}$preg_marker.{0,$limit})\s.*|s", '$1', $excerpt);
      $excerpt = strip_tags($excerpt); // YES, again, to remove the marker wrapper

      break;
    }
  }
  return $excerpt;
}
